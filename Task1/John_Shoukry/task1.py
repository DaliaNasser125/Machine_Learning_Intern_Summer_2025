# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14JoWnbkavhq1kEWYAKAeG6kcS023hD5W
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import files

# %matplotlib inline

uploaded = files.upload()

data=pd.read_csv('first_project.csv')

data.head(10)

data.columns

data['new']=data['average price ']/data['number of adults']

data.head()

data.drop('new',axis=1,inplace=True) # kda bms7 column lw hya axis=1 lw 0 ams7 row w implace di tms7 mn data aslyaa ( save changes in data)

data.info()

data.max()

data.sum()

data.sort_values('average price ',ascending=False).head() # kda da descending

data.shape

data.columns

data.duplicated()

#check null values
print(data.isnull().sum())

sum(data.duplicated(subset="Booking_ID")) # mrkz bs 3l booking id

sum(data.duplicated(subset="Booking_ID")) == 0

#data['asm column'].dropna() tshel kol el nulls
#data['asm column'].fillna("john") tshel kol el nulls t7ot mknhom Value Given(john)

data.tail()

data['booking status']=data['booking status'].replace("Not_Canceled",1)
data['booking status']=data['booking status'].replace("Canceled",0)

data['booking status'].tail(10)

data['room type']=data['room type'].replace("Room_Type 1",1)
data['room type']=data['room type'].replace("Room_Type 2",2)
data['room type']=data['room type'].replace("Room_Type 3",3)
data['room type']=data['room type'].replace("Room_Type 4",4)

#data.drop('Booking_ID',axis=1,inplace=True) remove column

sns.boxplot(data['lead time'],palette='rainbow',orient='h')

sns.countplot(x='booking status', data=data)
plt.title('Booking Status Count')
plt.show()

sns.boxplot(x='booking status', y='lead time', data=data, orient='v')
plt.title('Lead Time by Booking Status')
plt.show()

sns.boxplot(x='booking status', y='average price ', data=data)
plt.title('Price by Booking Status')
plt.show()

sns.boxplot(x='booking status', y='number of week nights', data=data)
plt.title('Number of Week Nights by Booking Status')
plt.show()

sns.boxplot(x='booking status', y='number of weekend nights', data=data)
plt.title('Number of Week Nights by Booking Status')
plt.show()

sns.boxplot(x='booking status', y='special requests', data=data)
plt.title('Special Requests by Booking Status')
plt.show()

sns.countplot(x='market segment type', hue='booking status', data=data)
plt.title('Market Segment vs Booking Status')
plt.xticks(rotation=15)
plt.show()

sns.countplot(x='type of meal', hue='booking status', data=data)
plt.title('Meal Plan vs Booking Status')
plt.show()

data.info()

# Count how many rows are Canceled
total = len(data)
canceled = len(data[data['booking status'] == 'Canceled'])

# Calculate percentage
cancellation_rate = (canceled / total) * 100

print(f"Canceled reservations: {cancellation_rate:.2f}%")
print(f"Number of canceled reservations: {canceled}")

data.shape

data.columns

data.groupby('booking status')[['P-C', 'P-not-C']].mean()

sns.countplot(data=data, x='repeated', hue='booking status')

def group_pnotc(x):
    if x == 0:
        return '0'
    elif x <= 2:
        return '1-2'
    elif x <= 5:
        return '3-5'
    else:
        return '>5'

data['pnotc_group'] = data['P-not-C'].apply(group_pnotc)

sns.countplot(data=data, x='pnotc_group', hue='booking status', palette='Set2')
plt.title('Past Successful Bookings (P-not-C) vs Current Booking Status')
plt.xlabel('P-not-C (Past Not-Canceled)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

def group_pc(x):
    if x == 0:
        return '0'
    elif x <= 2:
        return '1-2'
    elif x <= 5:
        return '3-5'
    else:
        return '>5'

data['pc_group'] = data['P-C'].apply(group_pc)


sns.countplot(data=data, x='pc_group', hue='booking status', palette='Set2')
plt.title('Past canceled Bookings  vs Current Booking Status')
plt.xlabel('P-C (Past-Canceled)')
plt.ylabel('Count')
plt.xticks(rotation=0)
plt.show()

sns.countplot(data=data, x='repeated', hue='booking status')
plt.title('Repeated Guests vs Booking Status')
plt.xlabel('Repeated Guest (0 = New, 1 = Returning)')
plt.ylabel('Number of Bookings')
plt.xticks([0, 1], ['New Guest', 'Returning Guest'])
plt.show()